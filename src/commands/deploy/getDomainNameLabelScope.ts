/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { createHttpHeaders, createPipelineRequest } from "@azure/core-rest-pipeline";
import { DomainNameLabelScope } from "@microsoft/vscode-azext-azureappservice";
import { createGenericClient, type AzExtPipelineResponse, type AzExtRequestPrepareOptions } from "@microsoft/vscode-azext-azureutils";
import { type ISubscriptionActionContext } from "@microsoft/vscode-azext-utils";
import { type SitePayload } from "../createWebApp/domainLabelScopeTypes";

export async function getDomainNameLabelScope(context: ISubscriptionActionContext, resourceGroupName: string, siteName: string): Promise<DomainNameLabelScope | undefined> {
    try {
        // The SDK does not currently support this updated api version, so we should make the call to the endpoint manually until the SDK gets updated
        const apiVersion: string = '2024-04-01';
        const authToken = (await context.credentials.getToken() as { token?: string }).token;
        const options: AzExtRequestPrepareOptions = {
            url: `${context.environment.resourceManagerEndpointUrl}subscriptions/${context.subscriptionId}/resourceGroups/${resourceGroupName}/providers/Microsoft.Web/sites/${siteName}?api-version=${apiVersion}`,
            method: 'GET',
            headers: createHttpHeaders({
                'Authorization': `Bearer ${authToken}`,
            }),
        };

        const client = await createGenericClient(context, undefined);
        const result = await client.sendRequest(createPipelineRequest(options)) as AzExtPipelineResponse;
        return (result.parsedBody as SitePayload)?.properties?.autoGeneratedDomainNameLabelScope ?? DomainNameLabelScope.Global;
    } catch {
        return undefined;
    }
}
